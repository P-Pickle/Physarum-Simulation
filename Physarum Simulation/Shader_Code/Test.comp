#version 460 core

struct Agent
{
    vec2 Pos;
    vec2 Dir;
};

layout(local_size_x = 10, local_size_y = 1,local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D TrailMap;
layout (std430, binding=1) buffer AgentBuffer
{
    Agent Agents[];
};

//settings
uniform int AgentCount;
uniform int width;
uniform int height;
uniform vec4 TrailColor;
uniform float deltaTime;

//used for updating agent location
uniform float TrailDeposit;
uniform float movespeed;
uniform float RotationAngle;

//used for sensing trails
uniform float SensorOffsetAngle;
uniform int SensorOffsetDistance;
uniform int SensorWidth;

ivec2 ID = ivec2(gl_GlobalInvocationID.xy);

void Update();
void Decay();
float Sense(Agent, float);
uint random (uint);

void main() 
{  
    Update();
}

void Update()
{
    vec4 Pixel = vec4(TrailColor.rgb, TrailDeposit);
    Agent CurrAgent = Agents[ID.x];
    vec2 Direction;
    float AgentAngle;

    //float RandomRotationPercent = 1;
    float RandomRotationPercent = float(random(uint(CurrAgent.Pos.x * CurrAgent.Pos.y * deltaTime))) / 4294967295.0;//find a random number within the range 0-1

    float FrontWeight = Sense(CurrAgent, 0);
    float LeftWeight = Sense(CurrAgent, SensorOffsetAngle);
    float RightWeight = Sense(CurrAgent, -SensorOffsetAngle);

    AgentAngle = atan(CurrAgent.Dir.y,CurrAgent.Dir.x);
    if(FrontWeight > LeftWeight && FrontWeight > RightWeight)//Front has the greatest weight
    {
        AgentAngle += 0;
    }
    else if (FrontWeight < LeftWeight && FrontWeight < RightWeight)//if both are greater than front turn in random direction based on RotationAngle
    {
        AgentAngle += (RandomRotationPercent - 0.5) * 2 * RotationAngle * deltaTime;
    }
    else if(RightWeight > LeftWeight)//Right has the greatest weight
    {
        AgentAngle -=   RotationAngle * deltaTime;
    }
    else if(LeftWeight > RightWeight)//Left has the greatest weight
    {
        AgentAngle += RotationAngle * deltaTime;
    }
    else
    {
        AgentAngle += 0;
    }


    Direction = vec2(cos(AgentAngle), sin(AgentAngle));
    //Direction = CurrAgent.Dir.xy;
    vec2 NewPos = CurrAgent.Pos + Direction * movespeed * deltaTime;

    if(NewPos.x < 0 || NewPos.x >= width)
    {
        NewPos.x = min(width - 0.01, max(0, NewPos.x));
        NewPos.y = min(height-0.01, max(0, NewPos.y));

        Direction = Direction * vec2(-1,1);
    }
    if(NewPos.y < 0 || NewPos.y >= height)
    {
        NewPos.x = min(width - 0.01, max(0, NewPos.x));
        NewPos.y = min(height-0.01, max(0, NewPos.y));

        Direction = Direction * vec2(1,-1);   
    }

    CurrAgent.Pos = NewPos;
    CurrAgent.Dir = Direction;

    Agents[ID.x].Pos = NewPos;
    Agents[ID.x].Dir = Direction;

    imageStore(TrailMap, ivec2(CurrAgent.Pos), Pixel);
}

float Sense(Agent CurrAgent, float SenseOffset)
{
    float AgentAngle = atan(CurrAgent.Dir.y, CurrAgent.Dir.x);
    float SenseAngle = AgentAngle + SenseOffset;
    vec2 SenseDirection = vec2(cos(SenseAngle), sin(SenseAngle));

    ivec2 center = ivec2(CurrAgent.Pos + SenseDirection * SensorOffsetDistance);
    int Radius = SensorWidth / 2;

    float sum = 0;
    int OffsetX;
    int OffsetY;
    vec4 samplePixel;

    for(int x = -Radius; x <= Radius; x++)
    {
        for(int y = -Radius; y <= Radius; y++)
        {
            OffsetX = min(width-1, max(0,center.x + x));
            OffsetY = min(height-1, max(0,center.y + y));

            samplePixel = imageLoad(TrailMap, ivec2(OffsetX,OffsetY));
            sum += samplePixel.a;
        }
    }

    return sum;

}


uint random(uint Seed)
{
    uint state = Seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}